#!/usr/bin/python3
# ~/dev/py/nlhtree_py/nlh_populate_data_dir

""" Given an NLHTree and a content-keyed store, populate a data directory. """

import os
import sys
from argparse import ArgumentParser

from optionz import dump_options
from xlattice import (parse_hashtype_etc, fix_hashtype,
                      check_u_path)
from nlhtree import (__version__, __version_date__, NLHTree)


def main():
    """
    Given an NLHTree and a content-keyed store, populate a data directory.

    That is, the files and subdirectories in the serialized NLHTree are
    recreated under the data directory, using the data in the content-
    keyed store.
    """

    app_name = 'nlh_populate_data_dir %s' % __version__
    # UDIR = os.environ['DVCZ_UDIR']

    # parse the command line ----------------------------------------
    desc =\
        'given an NLHTree and U, recreate the corresponding data directory'

    parser = ArgumentParser(description=desc)

    parser.add_argument('-b', '--list_file', default='list.nlh',
                        help='where to write listing (default = list.nlh)')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')

    parser.add_argument('-p', '--path', default='.',
                        help='path to data directory')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='print the version number and exit')

    parser.add_argument('-z', '--dont_do_it', action='store_true',
                        help="don't actually do anything, just say what you would do")

    parse_hashtype_etc(parser)
    args = parser.parse_args()

    if args.show_version:
        print(app_name)
        sys.exit(0)

    # fixups --------------------------------------------------------
    fix_hashtype(args)
    if args.testing:
        # output appears under tmp/
        # XXX this should be fixed to interpose # a random directory name
        #   that is not already in use
        # XXX This behavior needs to be clearly documented.
        args.list_file = os.path.join('tmp', args.list_file)
        if args.u_path[0] == '/':
            args.u_path = args.u_path[1:]
        args.u_path = os.path.join('tmp', args.u_path)

    # sanity checks -------------------------------------------------

    if not (args.testing or args.just_show):
        if not os.path.exists(args.path):
            os.makedirs(args.path, mode=0o755)
    if not args.just_show:
        check_u_path(parser, args, must_exist=True)
        os.makedirs(os.path.join(args.u_path, 'in'), mode=0o755, exist_ok=True)
        os.makedirs(
            os.path.join(
                args.u_path,
                'tmp'),
            mode=0o755,
            exist_ok=True)

    # complete setup ------------------------------------------------

    if args.verbose or args.just_show:
        print("%s %s" % (app_name, __version_date__))
        print(dump_options(args))

    # do what's required --------------------------------------------
    if not args.just_show:
        if args.dont_do_it:
            print("would be saving %s to %s and writing a listing to %s" % (
                args.path, args.u_path, args.list_file))
        else:
            tree = NLHTree.parse_file(args.list_file, args.hashtype)
            tree.populate_data_dir(args.u_path, args.path)


if __name__ == '__main__':
    main()
