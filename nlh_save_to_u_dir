#!/usr/bin/python3
# ~/dev/py/nlhtree_py/nlhSaveToUDir

""" Save an NLHTree into a content-keyed store. """

import os
import sys
from argparse import ArgumentParser

from xlattice import(check_hashtype, parse_hashtype_etc, fix_hashtype,
                     show_hashtype_etc, check_u_path)
from nlhtree import (__version__, __version_date__, NLHTree)


def main():
    """ Save an NLHTree into a content-keyed store. """

    app_name = 'nlhSaveToUDir %s' % __version__
    # UDIR = os.environ['DVCZ_UDIR']    # unused

    # parse the command line ----------------------------------------
    desc =\
        'given a project directory, write an NLHTree while backing the project up to U'

    parser = ArgumentParser(description=desc)

    parser.add_argument('-b', '--listFile', default='list.nlh',
                        help='where to write listing (default = list.nlh)')

    parser.add_argument('-d', '--dataDir', default='.',
                        help='path to data directory')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='print the version number and exit')

    parser.add_argument('-z', '--dontDoIt', action='store_true',
                        help="don't actually do anything, just say what you would do")
    parse_hashtype_etc(parser)
    args = parser.parse_args()

    if args.showVersion:
        print(app_name)
        sys.exit(0)

    # fixups --------------------------------------------------------
    fix_hashtype(args)
    if args.testing:
        # output appears under tmp/
        # XXX this should be fixed to interpose # a random directory name
        #   that is not already in use
        # XXX This behavior needs to be clearly documented.
        args.listFile = os.path.join('tmp', args.listFile)
        if args.u_path[0] == '/':
            args.u_path = args.u_path[1:]
        args.u_path = os.path.join('tmp', args.u_path)

    # sanity checks -------------------------------------------------
    check_hashtype(args.hashtype)
    if not (args.testing or args.justShow):
        if not os.path.exists(args.dataDir):
            print("%s does not exist; cannot continue" % args.dataDir)
            sys.exit(1)
    if not args.justShow:
        check_u_path(parser, args, must_exist=False)
        os.makedirs(os.path.join(args.u_path, 'in'), mode=0o755, exist_ok=True)
        os.makedirs(
            os.path.join(
                args.u_path,
                'tmp'),
            mode=0o755,
            exist_ok=True)

    # complete setup ------------------------------------------------

    if args.verbose or args.justShow:
        print("%s %s" % (app_name, __version_date__))

    if args.verbose or args.justShow:
        print('dataDir          = ' + str(args.dataDir))
        print('dontDoIt         = ' + str(args.dontDoIt))
        print('justShow         = ' + str(args.justShow))
        print('listFile         = ' + str(args.listFile))
        print('showVersion      = ' + str(args.showVersion))
        print('testing          = ' + str(args.testing))
        show_hashtype_etc(args)

    # do what's required --------------------------------------------
    if not args.justShow:
        if args.dontDoIt:
            print("would be saving %s to %s and writing a listing to %s" % (
                args.dataDir, args.u_path, args.listFile))
        else:
            NLHTree.save_to_u_dir(
                args.dataDir, args.u_path, args.listFile, args.hashtype)

if __name__ == '__main__':
    main()
